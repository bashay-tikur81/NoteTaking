#+TITLE: Data Structures and Algorithm in Java 6th Edition
#+AUTHOR_OF_TEXTBOOK: Micheal T. Goodrich, Roberto Tamassia, Micheal H.Goldwasser
#+AUTHOR: Ertale81

* Object-Oriented Design
** Goals, Principles and Patterns
*** Object-Oriented Design Goals
- The main "actors" in object-oriented paradigm are called *objects*. Each object is an instance of a class. Each class presents to the outside world a concise and consistent view of the object that are instances of this class.
- The class definition typically specifies that *data fields*, also known as *instance variables*, that an object contains, as well as the *methods* (operations) that an object can execute.
- Software implementation should achieve *robustness, adaptability*, and *reusability*
  1) We want a software to be *robust*, that is, capable of handling unexpected inputs that are not explicitly defined for its application.
  2) Software needs to be able evolve overtime in response to changing condition in its environment. This is called *adaptability* (also called *evolvability*). Related to this concept is *portability*, which is the ability of a software to run with minimal changes on different hardware and operating system platforms. An advantage of writing software in Java is its portability.
     1) Going hand in hand with adaptability is the desire that software be reusable, that is, the same code should be usable as a component of different systems in various applications.
*** Object-Oriented Design Principles
- Chief among the principles of the object-oriented approach, which are intended to facilitate the goals outlined above are:
  + Abstraction: The notion of *abstraction* is to distill a complicated system down into its most fundamental parts. Typically, describing the parts of a system involves naming them and explaining their functionality.
  + Encapsulation: Different components of a software system should not reveal the internal details their respective implementations. One of the main advantages of encapsulation is that it gives one programmer freedom to implement the details of a component, without concern that other programmers will be writing code that intricately depends on those internal decisions. The only constraint on the programmer of a component is to maintain the public interface for the component, as other programmers will be writing code that depends on that interface. Encapsulation yields robustness and adaptability, for it allows the implementation details of parts of a program to change without adversely affecting other parts, thereby making it easier to fix bugs or add new functionality with relatively local changes to a component.
  + Modularity: This refers to different components of a software system are divided into separate functional units. Robustness is greatly increased because it is easier to test and debug separate components before they are integrated into a larger software system.
- Difference between abstraction and encapsulation:

  |--------------------------------------------+-------------------------------------------|
  | Abstraction                                | Encapsulation                             |
  |--------------------------------------------+-------------------------------------------|
  | - Solves the problem at design level.      | - Solves its implementation level.        |
  |--------------------------------------------+-------------------------------------------|
  | - Hides unwanted details while giving out  | - Hiding the code and data into a single  |
  | most essential details.                    | unit to protect the inner working of an   |
  |                                            | object from outside world.                |
  |--------------------------------------------+-------------------------------------------|
  | - Lets you focus on what the object does   | - It hides the internal detail how the    |
  | instead of how it does                     | object works                              |
  |--------------------------------------------+-------------------------------------------|
  | - It focuses on outer lookouts.e.g, moving | - It focuses on internal working or inner |
  | of a vehicle                               | lookout.e.g, how exactly the vehicle move |
  |--------------------------------------------+-------------------------------------------|
  | - In Java Abstraction is supported using   | - In Java encapsulation is supported      |
  | /interfaces and abstract classes/            | using access modifiers. e.g, /public,/      |
  |                                            | /private and /protected/                     |
  |--------------------------------------------+-------------------------------------------|
*** Design Patterns
- Design patterns describes a solution to a "typical" software design problem. A pattern provides a general template for a solution that can be applied in many different situations. It describes the main elements of a solution in an abstract way that can be specialized for a specific problem at hand.
- These design patterns fall into two groups:
  1) Pattern for solving algorithm design problems. For example:
     + Recursion
     + Amortization
     + Divide-and-conquer
     + Prune-and-search, also known as decrease-and-conquer
     + Brute force
     + Greedy method
     + Dynamic programming
  2) Patterns for solving software engineering problems. For example:
     + Template method
     + Composition
     + Adapter
     + Position
     + Iterator
     + Factory
     + Comparator
     + Locator
** Inheritance
*** What is Inheritance
- Inheritance is a mechanism for a modular and hierarchical organization. This allows a new class to be defined based upon an existing class as the starting point. We say that a subclass(child class) *extends* a superclass(parent or base class).
- When inheritance is used, the subclass automatically inherits, as its starting point, all methods from the superclass (other than constructors). The subclass can differentiate itself from its superclass in two ways.
  1) It may *augment* the superclass by adding new fields and new methods.
  2) It may also *specialize* existing behaviors by providing a new implementation that overrides an existing method.
*** Polymorphism
- In the context of object-oriented design, polymorphism  refers to the ability of a reference variable to take different forms.
- *Liskov Substitution Principle*, states that a variable (or a parameter) with a declared type can be assigned an instance from any direct or indirect subclass of that type. Informally, this is a manifestation of the "is a" relationship modeled by inheritance.
- When we say a variable is *polymorphic*, it can take one of many forms, depending of the specific class of the object to which it refers.
- Java uses a process known as *dynamic dispatch*, deciding at runtime to call the version of the method that is most specific to the actual type of the referenced object(not the declared type). Let's assume we have a superclass "Human" and a subclass "Student" and both classes have a method called walk. And we have a variable declared as Human but the referenced object is Student. So, when we call walk method the method inside Student class will get executed. This is Java's dynamic dispatch. But for this to work both the superclass and subclass must have both method name.
- Java also provides an *instanceof* operator that tests, at runtime, whether an instance satisfies as a particular type.
** Interface and Abstract Class
*** Interface
- The main structural element in Java that enforces an API is *interface*. An interface is a collection of method declarations with no data and with no bodies. That is the methods of an interface are always empty; they are simply method signatures. Interface do not have constructors and they cannot be directly instantiated.
- When a class implements an interface, it must implement all of the methods declared in the interface. In this way, interfaces enforce requirements that an implementing class has methods with certain specified signatures.
- In Java, multiple inheritance is allowed for interface but not for classes. The reason for this rule is that interfaces do not define fields or method bodies, yet classes typically do. Thus, if Java were to allow multiple inheritance for classes, there could be a confusion if a class tried to extend from two classes that contained fields with the same name or methods with the same signatures. Since there is no such confusion for interfaces, and there are times when multiple inheritance of interfaces is useful, Java allows interfaces to use multiple inheritance.
*** Abstract Classes
- In Java, an *abstract class* serves a role somewhat between that of a traditional class and that of an interface. Like an interface, an abstract class may define signatures for one or more methods without providing an implementation of those method bodies; such methods are known as *abstract methods*. However, unlike an interface, an abstract class may define one or more fields and any number of methods with implementation (so-called *concrete methods*). An abstract class may also extend another class and be extended by further subclasses.
- As is the case with interfaces, an abstract class may not be instantiated, that is, no object can be created directly from an abstract class. In a sense, it remains an incomplete class. A subclass of an abstract class must provide an implementation for the abstract methods of its superclass, or else remain abstract. To distinguish from abstract classes, we will refer to nonabstract classes as *concrete classes*.
- In comparing the use of interfaces and abstract classes, it is clear that abstract classes are more powerful, as they can provide some concrete functionality. However, the use of abstract classes in Java is limited to *single inheritance*, so a class may have at most one superclass, whether concrete or abstract.
** Exceptions
- Exceptions are unexpected events that occur during the execution of a program. An exception might result due to an unavailable resource, unexpected input from user, or simply a logical error on part of the programmer. In Java, exceptions are objects that can be *thrown* by code that encounters an unexpected situation, or by the Java Virtual Machine, for example, if running out of memory. An exception may also *caught* by a surrounding block of code that "handles" the problem in an appropriate fashion. If uncaught, an exception causes the virtual machine to stop executing the program and to report an appropriate message to the console.
- A general methodology for handling exception is a *try-catch* construct in which a guarded fragment of code that might throw an exception is executed. If it throws an exception, then that exception is *caught* by having the flow of control jump to a predefined *catch* block that contains the code to analyze the exception and apply an appropriate resolution. If no exception occurs in the guarded code, all catch blocks are ignored.
*** Throwing Exception
- Exceptions originate when a piece of Java code finds some sort of problem during execution and *throws* an exception object. This is done by using the *throw* keyword followed by an instance of the exception type to be thrown. It is often convenient to instantiate an exception object at the time the execution has to be thrown. Thus, a *throw* statement is typically written as follows:
      *throw new* /exceptionType(parameters);/
      where exceptionType is the type of the exception and the parameters are sent to that type’s constructor; most exception types offer a version of a constructor that accepts an error message string as a parameter.
- *The Throws Clause*:
  + When a method is declared, it is possible to explicitly declare, as part of its signature, the possibility that a particular exception type may be thrown during a call to that method. It doesn't matter whether the exception is directly from a *throw* statement in that method body, or propagated upward from a secondary method call made from within the body.
  + The syntax for declaring possible exceptions in a method signature relies on the keyword *throws* (not to be confused with an actual throw statement).
- *Checked and Unchecked Exception*
  + Java provides further refinement by declaring the /RuntimeException class/ as an important subclass of Exception. All subtypes of /RuntimeException/ in Java are officially treated as *unchecked exceptions*, and any exception type that is not part of the RuntimeException is a *checked exception*.
  + The intent of the design is that runtime exceptions occur entirely due to mistakes in programming logic, such as using a bad index with an array, or sending an inappropriate value as a parameter to a method. While such programming errors will certainly occur as part of the software development process, they should presumably be resolved before software reaches production quality. Therefore, it is not in the interest of efficiency to explicitly check for such mistake at runtime, and thus are designated as *"unchecked"* exceptions.
  + In contrast, other exceptions occur because of conditions that cannot easily be detected until a program is executing, such as an unavailable file or a failed network connection. Those are typically designated as “checked” exceptions in Java (and thus, not a subtype of RuntimeException).
  + The designation between checked and unchecked exceptions plays a significant role in the syntax of the language. In particular, *all checked exceptions that might propagate upward from a method must be explicitly declared in its signature.*
  + A consequence is that if one method calls a second method declaring checked exceptions, then the call to that second method must either be guarded within a try-catch statement, or else the calling method must itself declare the checked exceptions in its signature, since there is risk that such an exception might propagate upward from the calling method.
** Casting and Generics
*** Casting
- *A widening conversion* occurs when a type /T/ is converted into a "wider" type /U/. The following are common cases of widening conversion:
  + /T/ and /U/ are class types and /U/ is superclass of /T/.
  + /T/ and /U/ are interface types and /U/ is a superinterface of /T/.
  + /T/ is a class that implements interface /U/.
- Widening conversions are automatically performed to store the result of an expression into a variable, without the need for an explicit cast. Thus, we can directly assign the result of an expression of type /T/ into a variable v of type /U/ when the conversion from /T/ to /U/ is a widening conversion.
- The correctness of a widening conversion can be checked by the compiler and its validity does not require testing by the Java runtime environment during program execution.
- *A narrowing conversion* occurs when a type /T/ is converted to a "narrower" type /S/. The following are common cases of narrowing conversions:
  + /T/ and /S/ are class types and /S/ is subclass of /T/.
  + /T/ and /S/ are interface types and /S/ is subinterface of /T/.
  + /T/ is an interface implemented by a class /S/.
- In general, a narrowing conversion of reference types requires an explicit cast. Also, the correctness of a narrowing conversion may not be verifiable by the compiler. Thus, its validity should be tested by the Java runtime environment during program execution.
- *Casting Exceptions*
  + In Java, we can cast an object reference /o/ of type /T/ into a type /S/, provided the object /o/ is referring to is actually type /S/. If, on the other hand, object /o/ is not also type /S/, then attempting to cast /o/ to type /S/ will throw an exception called *ClassCastException*.
  + To avoid problems such as this and to avoid peppering our code with try-catch block every time we perform a cast, Java provides a way to make sure an object cast be correct. Namely, it provides an operator, *instanceof*, that allows us to test whether an object variable is referring to an object that belongs a particular type. The syntax for this operator is /objectReference/ *instanceof* /referenceType/, where /objectReference/ is an expression that evaluates to an object reference and /referenceType/ is the name of some existing class, interface, or enum. If /objectReference/ is indeed an instance satisfying /referenceType/, then the operator returns *true*; otherwise it returns *false*. Thus, we can avoid a /ClassCastException/ from being thrown in this way.
*** Generics
- Java includes support for writing *generic* classes and methods that can operate on a variety of data types while often avoiding the need for explicit cast. The generics framework allows us to define a class in terms of a set of *formal type parameters*, which can then be used as the declared type for variables, parameters, and return values within the class definition. Those formal type parameters are later specified when using the generic class as a type elsewhere in the program.
- When subsequently declaring a variable with such a parameterize type, we must explicitly specify *actual type parameter* that will take the place of the generic formal type parameter. The actual types for generic programming must be object types, so use wrapper classes for primitive types. Like:
      Pair<String, Double> pr;
      Here, we are using *Double* wrapper class not *double* primitive type.
- There is an important caveat related to generic types and the use of arrays. Although Java allows the declaration of an array storing a parameterized type, it doesn't technically allow the  instantiation of a new array involving those types. Fortunately, it allows an array defined with parameterized type to be initialized with a newly created, non parametric array, which can then be cast to the parameterized type. Even so, this later mechanism causes the Java compiler to issue warning, because it isn't 100% type-safe.
- Assume that we want to create a generic /Portfolio/ class that can store a fixed number of generic entries in an array. If the class uses <T> as a parameterized type, it can declare an array of type T[], but it can not directly instantiate such an array. Instead, a common approach is to instantiate an array of type Object[], and then make narrowing cast to type T[], as shown in the following:
  
  #+BEGIN_SRC java
    public class Portfolio<T>{
        T[] data;
        public Portfolio(int capacity){
            data = new T[capacity]; // illegal, compiler error
            data = (T[]) new Object[capacity]; // legal, but compiler warning
        }
    }
  #+END_SRC
- *Generic Methods*
  + The generic framework allows us to define generic version of individual methods(as opposed to generic version of entire class). To do so, we include a generic formal type declaration among the method modifiers.
         /public static <T> void reverse(T[] data);/
         Here, the use of <T> modifier used to declare the method to be generic.
         But this generic method can not be applied to primitive arrays, because autoboxing doesn't apply to entire arrays.
- *Bounded Generic Types*
  + By default, when using a type name such as T in a generic class or method, a user can specify any object type as the actual type of the generic. A formal parameter type can be restricted by using the *extends* keyword followed by a class or interface. In that case, only a type that satifies the stated condition is allowed to substitute for the parameter. The advantage of such a bounded type is that it becomes possible to call any methods that are guaranted by the stated bound.
  + As an example, we might declare a generic ShoppingCart that could only be instantiated with a type that satisfied the Sellable interface. Such class would be declared beginning with the line:
        *public class* ShoppingCart<T *extends* Sellable>{}
        Within this class definition, we would then be allowed to call methods found on Sellable such as description() and lowestPrice() on any instances of type T
** Nested Classes
- Java allows a class definition to be *nested* inside the definition of another class. The main use for nesting classes is when defining a class that is strongly affiliated with another class. This can help increase encapsulation and reduce undesired name conflicts. Nested classes are a valuable technique when implementing data structures, as an instance a nested use can be used to represent a small portion of a larger data structure, or an auxiliary class that helps navigate a primary data structure.
- The containing class is known as the *outer class*. The *nested class* is formally a member of the outer class, and its fully qualified name is /OuterName.NestedName/.
- The use of nested classes can help reduce name collisions, as it is perfectly acceptable to have another class named /NestedClassName/ nested within some other class(or as a self-standing class).
- A nested class has an independent set of modifiers from the outer class. Visibility modifiers (e.g., *public, private*) effect whether the nested class definition is accessible beyond the outer class definition. For example, a private nested class can be used by the outer class, but by no other classes.
- A nested class can also be designated as either *static* or (by default) *nonstatic*, with significant consequences. A *static* nested class is most like a traditional class; its instances have no association with any specific instance of the outer class.
- A nonstatic nested class is more commonly known as an *inner class* in Java. An instance of an inner class can only be created from within a nonstatic method of the outer class, and that inner instance becomes associated with the outer instance that creates it. Each instance of an inner class implicitly stores a reference to its associated outer instance, accessible from within the inner class method using the syntax *OuterName.this* (as opposed to *this*, which refers to the inner instance). The inner instance also has private access to all members of its associated outer instance, and can rely on the formal type parameters of the outer class, if generic.
* Fundamental Data Structures
** Arrays
- We use a variable to represent the array as a whole. Example of declaring an array variable:
      int[] grades;
      [] indicates that it will represent an array
      the /int/ indicates that the elements will be ints.
- Declaring an array variable doesn't create the array. Example of creating an array:
      grades = new int[8];
- We often declare and create an array in the same statement. General syntax is:
      /type[] arrayName = new type[length];/
- Length of an array can be obtained as: arrayName.length. Note that, it is not a method.
- When you create an array but not give a value, the runtime system give the elements a default value. The value used depend on the type of the elements:
  |---------+---------------|
  | type    | default value |
  |---------+---------------|
  | int     | 0             |
  |---------+---------------|
  | double  | 0.0           |
  |---------+---------------|
  | char    | '\0'          |
  |---------+---------------|
  | boolean | false         |
  |---------+---------------|
  | Object  | null          |
  |---------+---------------|
- If a variable represents an object, the object itself is not stored inside the variable. Rather, the object is located somewhere else in memory, and the variable holds the memory address of that object. A variable that stores a reference to an object are called /reference variable./
- An array is a type of object. Thus, an array variable is a reference variable, it stores a reference to an array.
- When we assign the value of one reference variable to another, we copy the reference to the object. We don't copy the object itself.
- Once we have created an array, we can not increase its size. Instead, we need to do the following:
  + create a new, larger array(use a temporary variable)
  + copy the contents of the original array into the new array
  + assign the new array to the original array variable
- We can also create a multi-dimensional arrays. The most common type is a two-dimensional (2-D) array. We can visualize it as a matrix consisting of rows and columns.
  For example:
      int[][] scores = new int[5][8];
- To access an element, we use an expression of the form /arrayName[row][column]/
  e.g., scores[2][1];
- 2-D array can be used for maintaining a game board, like Tic-Tac-Toe
- A 2-D array is really an array of arrays. For example:
      int[][] scores = new int[5][8];
      in this array creation, scores[0] represents the entire first row; scores[1] represents the entire second row, etc...
- arrayName.length gives the number of rows. /arrayName[row].length/ gives the number of columns in that row.
- To perform some operations on all the elements in a 2-D array, we typically uses a nested loop.
- It is also possible to have a "ragged" 2-D array in which different rows have different number of columns.
      int[][] foo = {{11,22,33},{7,20,30,40}, {1,2}};
  
