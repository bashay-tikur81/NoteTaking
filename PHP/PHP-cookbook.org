#+TITLE: PHP Programming Cookbook
#+AUTHOR: Ertale81

* Introduction
- PHP(PHP Hypertext Preprocessor) is a scripting language that is especially suited for web development and can be embedded to HTML.
- PHP allows to create dynamic content that interacts with databases.
- PHP can collect form data, generate dynamic page content, send or receive cookies.
- There are three main areas where PHP scripts are use:
  1) Server-side scripting
     + The most used and main target of PHP
  2) Command-line scripting
     + You can make a PHP script to run it without any server or browser. You only need the PHP parser.
     + This type of usage is ideal for scripts regularly executed using cron(Linux) or Task scheduler on windows.
  3) Writing Desktop Applications
     + PHP may not the very best language to create a desktop application with a graphical user interface, but if you know PHP very well, and would like to use some advanced PHP features in your client-side applications you can also use PHP-GTK to write such programs. You also have the ability to write cross-platform applications this way.
- *Why PHP?*
  + Compatible with almost all servers used nowadays.
  + Will run on most platforms.
  + Supports(compatible with) wide range of databases.
  + Free and Open source.
  + Easy to learn and large community
- *PHP Language Basics*
  + There are four ways the PHP parser engine can differentiate PHP code in a webpage:
    1) Canonical PHP tags
       - This is the most popular and effective PHP tag style and looks like this:
         <?php...?>
    2) Short open tags
       - These are the shortest option, but they might need a bit of configuration, and you might either choose the /--enable-short-tags/ configuration option when building PHP, or set the /short_open_tag/ setting in your php.ini file.
         <?...?>
    3) ASP-like Tags
       - In order to use ASP-like tags, you will need to set the configuration option in the php.ini file:
         <%...%>
    4) HTML script tags
       - You can define a new script with an attribute language like so:
         <script langauge="PHP">...</script>
- *Commenting PHP*
  + # or //// to write single line comment and //* *// to write multi line comment
- Three different ways to output:
  1) print("Hello, World!"); It always returns 1
  2) echo "Hello, World!"; can take comma delimited list of arguments to output.
  3) printf("Hello, World!"); is direct analogy of C's /printf()/
- Variables
  + Any type of variable in PHP starts with a leading dollar sign($) and variables don't need to be declared before assignment.
  + The main data types used to construct variables are:
    - Integers, Doubles, Booleans, Strings, Arrays, Objects
    - Example:
      $intNum = 47;
      $doubleNum = 88.9;
      $boolean = true;
      $string = "Learning PHP";
      $array = array("apple", "Mango", "Orange");
      $object = new person; // assuming there is a class called person
- Functions
  + Basic syntax for creating a function
    <?php
    function functionName($arg1, $arg2...){
    // code
    }
    functionName($arg1, $arg2...); // function call
    >
  + PHP uses the dot (.) operator to concatenate strings.
  + We can tell the function to return a value upon execution. e.g.. return $value;
- Database connectivity
  + There are four ways you can generally consider when you want to connect to a previously created database.
    1) Connecting to MySQL Databases(mysql extension is deprecated and will be removed in the future)
       #+begin_src php
         <?php
         $username = "your_name";
         $password = "your_password";
         $hostname = "localhost";
         // connection to the database
         $dbconnect = mysql_connect($hostname, $username, $password)
         or die("unable to connect to MySQL")
         // select a specific database
         $dbselect = mysql_select_db("dbName", $dbconnect)
         or die("could not select dbName")
         
         ?>
       #+end_src

    2) Connecting to MySQLi database(Procedurial)
       The MySQLi stands for MySQL improved
       #+begin_src php
         <?
         $username = "your_name";
         $password = "your_password";
         $hostname = "localhost";
         // connecting to database
         $dbconnect = mysqli_connect($hostname, $username, $password)
         // another way of checking if the connection was succesfull
         if (!$dbconnect){
             die("Connection failed: ".mysqli_connect_error());
         }
         // select a specific database
         mysqli_select_db($dbconnect, "dbName");
         ?>
       #+end_src

    3) Connecting to MySQLi databases(Object Oriented)
       Although the functionality is basically the same, this is another way, the object-oriented way of connecting to a database using the MySQLi extension.
       #+begin_src php
       $username = "your_name";
       $password = "your_password";
       $hostname = "localhost";
       // create a connection
       $dbconnect  = new mysqli($hostname, $username, $password);
       // check connection
       if($dbconnect ->connect_error){
          die("Connection faile: ". $dbConnect->connect_error);
       }
       // select a specific database
       $mysqli->select_db("dbName");
       #+end_src

    4) Connecting to PDO Databases
       PDO stands for PHP Data Objects and is a consistent way to access database, which promises much easier portable code. PDO is more like a data access layer which is unified API rather than an abstraction layer.  The syntax for connecting to a database using PDO is:
       #+begin_src php
       $username = "your_name";
       $password = "your_password";
       $hostname = "localhost";
       // try to create connection
       try {
           $dbConnect = new PDO("mysql:host=$hostname;dbname=myDB", $username, $password);
           // set the PDO error mode to exception
           $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
           echo "Connected successfully";
       }
       // show an error if the connection was unsuccessful
       catch(PDOException $e) {
       echo "Connection failed: " . $e->getMessage();
}
       #+end_src
       PDO is widely used today for a bunch of advantages it offers. Among them, we can mention that PDO allows for prepared statements and rollback functionality which makes it really consistent, it throws catchable exceptions which means better error handling and uses blind parameters in statements which increases security

- PHP form handling
  + Both isset() and empty() are built-in PHP functions used to check variables
  + isset(): checks if a variable is set(i.e., declared and not null). It returns /true/ if the variable exists and is not /null/ and /false/ if it's not set set or is explicitly set to /null/.
  + empty(): checks if the variable is empty. Returns /true/ if the variable is: *"", 0, "0", null, false, array() or if the variable is not set at all*. it returns /false/ if the variable contains non-empty value.
  + We use $_POST["name"] to get information the user posted
    e.g., $name = $_POST["name"];
- PHP Include & Require Statements
  + Include and require statements are two almost identical statements that help in an important aspect of coding, the organization of code, and making it more readable and flexible. The include/require statement copies all text, code or any other markup from one existing file to the file using the statement.
  + The include and require statements are the same, except upon failure of code execution where:
    • require will produce a fatal error (E_COMPILE_ERROR) and stop the script from executing
    • include will only produce a warning (E_WARNING) and the script will continue
  + The syntax of these two statements is:
    <?php
    include 'file.php'; //// in the case of include
    require 'file.php'; // in the case of require
    ?>
- PHP Classes
  + use 'class' followed by the class name.
    #+begin_src
    <?php
    class Vehicle {
      var $brand; // just a declared undefined variable
      var $speed = 80; // a declared and defined variable
      function setSpeed($speedValue) { // a function to change speed
        $this->speed = $speedValue; // this will replace speed with our value
      }
      function setBrand($brandName) { // a function to change brand
        $this->brand = $brandName; // this will set a brand name
    }
      function printDetails(){ // a function to print details
        echo "Vehicle brand is: ".$this->brand;
        echo "";
          echo "Vehicle speed is: ".$this->speed;
      }
    }
    $myCar = new Vehicle; // an instance of our Vehicle class (an object)
    $myCar->setBrand("Audi"); // calling the function setBrand to define a brand
    $myCar->setSpeed(120); // calling the function setSpeed to change speed
    $myCar->printDetails(); // calling the printDetails function to see details
    ?>
    #+end_src

- PHP Constructor Function
  + PHP provides a special function called /__construct()/ to define a constructor, which can take as many arguments as we want. constructors are called automatically whenever an object is created.
    #+begin_src php
      <?
        class Vehicle{
        $brand;
        $speed;
        function __constructor($brandName, $speedValue){
          this->brand = $brandName;
          this->speed = $speedValue;
        }
            function printDetails(){
              echo "Vehicle brand is: ".$this->brand;
              echo "Vehicle speed is: ".$this->speed;
            }
      }
      $car1 = new Vehicle("Totyat", 130);
      $car1->printDetails();
      ?>
    #+end_src

- PHP Session
  + A session is a way to store information, which can be accessed across multiple webpages.
  + To use session in php we call the /session_start()/ function before anything else is output to the browser. All session variable values are stored in the global $_SESSION associative array. Assigning a session variable is as simple as writing $_SESSION[`num`] = 1 and we can read from it the same way we would read from a normal variable. We use the $_SESSION[`num`] variable as a counter to store the number of times the script has received a record.
  
