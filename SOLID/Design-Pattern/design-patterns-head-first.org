#+TITLE: Head First Design Patterns 2nd Edition
#+AUTHOR: Ertale81
#+STARTDATA:<2025-03-16 Sun>

* Intro To Design Patterns
- The best way to use patterns is to /load your brain/ with them and then /recognize places/ in your designs and existing applications where you /apply/ them. Instead of *code reuse*, with patterns you get *experience reuse*.
- Design principle identify the aspects of your application that vary and separate them from what stays the same. In other words, if you have got some aspect of your code that is changing, say with every new requirement, then you know you've got a behavior that needs to be pulled out and separated from all the stuff that doesn't change. Here is another way to think about this principle: *take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affect those that don't.*
- All patterns provide a way to let some part of a system vary independently of all other parts.
- Second design principle: programs to interface, not an implementation. “Program to an interface” really means “Program to a supertype.
-
  
* Factory Pattern
- There is more to making objects than just using the *new* operator. Instantiation is an activity that shouldn't always be done in public and often lead to coupling problems. And we don't want that, do we?
- *When you see "new,"* think *"concrete"*
- When you use the *new* operator you are certainly instantiating a concrete class, so that's definitely an implementation and not an interface. Ant tying your code to a concrete class can make it more fragile and less flexible. We supposed to program to an interface not to an implementation.
- Technically there is nothing wrong with *new* operator. The real culprit is our old friend *CHANGE* and how change impacts our use of *new*.
- By coding to an interface, you can insulate yourself from many of the changes that might happen to a system down the road. Why? If your code is written to an interface, then it will work with any new classes implementing that interface through polymorphism. However, when you have code that makes use of lots of concrete classes, you're looking for trouble because that code may have to be changed as new concrete classes are added. So, in other words, you code will not be "closed for modification." To extend your code with new concrete types, you'll have to reopen it. Remember that designs should be "open for extension but closed for modification".
- So what can you do? Remember, our first principle deals with change and guides us to identify the aspects that vary and separate them from what stays the same.
- In design patterns, the phrase "implement an interface" does NOT always mean "write a class that that implements a Java interface, by using the 'implements' keyword in the class declaration". In the general use of the phrase, a concrete class implementing a method from a supertype(which could be an abstract class OR interface) is still considered to be "implementing the interface" of that type.
- A factory method handles object creation and encapsulate it in a subclass. This decouples the client code in superclass from the object creation code in the subclass.
- All factory patterns encapsulate object creation. The Factory Method Pattern encapsulates object creation by letting subclass decide what object to create.
- *The Factory Method Pattern* defines an interface for creating an object, but lets subclass decides which class to instantiate. Factory Method lets a class defer instantiation to subclass.
- *Dependency Inversion Principle: depend upon abstractions. Don't depend upon concrete classes*. This principle suggests that our high-level components should not depend on our low-level components; rather, they should /both/ depend on abstraction. A high-level component is a class with behavior defined in terms of other, "low-level" components.
- The "inversion" in the name Dependency Inversion Principle is there because it inverts the way you typically might think about your OO design.
- The following guidelines can help you avoid OO designs that violate the Dependency Inversion Principle:
  + No variable should hold a reference to a concrete class. If you use *new*, you will be holding a reference to a concrete class. Use factory to get around that.
  + No class should derive from a concrete class. If you derive from a concrete class,you're depending on a concrete class. Derive from an abstraction, like an interface or an abstract class.
  + No method should override an implemented method of any of its base classes. If you override an implemented method, then your base class wasn't really an abstraction to start with. Those methods implemented in the base class are meant to be shared by all your subclasses.
- Those guidelines are hard to follow, you may not able to write a single program if you follow them. But you should strive for, rather than a rule you should follow all the time.
- But, if you internalize these guidelines and have them in the back of your mind when you design, you’ll know when you are violating the principle and you’ll have a good reason for doing so. For instance, if you have a class that isn’t likely to change, and you know it, then it’s not the end of the world if you instantiate a concrete class in your code.Think about it; we instantiate String objects all the time without thinking twice. Does that violate the principle? Yes. Is that okay? Yes. Why? Because String is very unlikely to change.
- If, on the other hand, a class you write is likely to change, you have some good techniques like Factory Method to encapsulate that change.
- 

** Abstract Factory Pattern
- The abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete class.
- An abstract factory allows a client to use an abstract interface to create a set of related products without knowing(or caring) about the concrete products that are actually produced. In this way, the client is decoupled from any of the specifics of the concrete products.
